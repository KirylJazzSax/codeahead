{"version":3,"sources":["axios.js","services/userService.js","services/User.js","components/register/RegisterComponent.jsx","services/taskService.js","pusher.js","components/tasks/TaskFormComponent.jsx","components/tasks/TasksComponent.jsx","components/login/LoginComponent.jsx","components/layout/LayoutComponent.jsx","App.js","reportWebVitals.js","index.js"],"names":["axios","create","baseURL","process","getUserData","window","userData","register","user","post","name","email","password","isLogged","token","saveUserData","res","data","getUserToken","User","this","RegisterComponent","props","state","requestSend","handleSubmit","bind","event","a","setState","handleUserRegistered","console","log","toast","error","schema","yup","shape","min","required","Col","className","validationSchema","onSubmit","initialValues","handleChange","values","handleBlur","touched","errors","isValid","Form","noValidate","Group","controlId","Label","Control","type","value","onChange","Feedback","Button","disabled","React","Component","addTask","task","headers","deleteTask","delete","id","Pusher","cluster","TaskFormComponent","taskToEdit","hasOwnProperty","handleEditTask","patch","handleEditTaskAsync","handleCreateTask","title","text","notification_date","notification_time","TasksComponent","tasks","showTaskModal","disabledTaskIds","closeModal","pusher","subscribe","replaceTaskAndNotify","pushTaskAndNotify","removeTaskFromStateAndNotify","initPusherSubscriptions","get","then","moment","format","find","t","success","notificationTime","message","ind","findIndex","task_id","taskSeen","splice","taskId","ids","i","removeFromDisabledIds","dark","list","map","completed","r","variant","onClick","notLoggedToast","Table","striped","bordered","hover","size","Modal","show","onHide","length","LoginComponent","handleUserLogged","LoginNav","Nav","onSelect","selectedKey","Item","Link","eventKey","GreetingsNav","LayoutComponent","openModal","closeLoginModal","closeRegisterModal","showRegisterModal","showLoginModal","userName","nav","Container","fluid","Row","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bfa6e864.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n    baseURL: process.env.REACT_APP_API_URL\r\n})\r\n","import axios from \"../axios\";\r\n\r\nexport const fetchUser = () => {\r\n    return axios.get('user');\r\n}\r\n\r\nexport const getUserData = () => {\r\n    return window.userData;\r\n}\r\n\r\nexport const register = user => {\r\n    return axios.post('signup', {\r\n        name: user.name,\r\n        email: user.email,\r\n        password: user.password,\r\n    });\r\n}\r\n\r\nexport const login = (email, password) => {\r\n    return axios.post('login', {\r\n        email, password\r\n    });\r\n}\r\n\r\nexport const isLogged = () => {\r\n    return window.userData && window.userData.token;\r\n}\r\n\r\nexport const saveUserData = (res) => {\r\n    window.userData = res.data;\r\n}\r\n\r\nexport const getUserToken = () => {\r\n    return window.userData ? window.userData.token : null;\r\n}\r\n\r\nexport const taskSeen = (task) => {\r\n    return axios.post('task-seen',\r\n        {\r\n            task_id: task.id,\r\n        },\r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${getUserToken()}`\r\n            }\r\n        }\r\n    )\r\n}\r\n","export default class User {\r\n    constructor(name, email, password) {\r\n        this.name = name;\r\n        this.email = email;\r\n        this.password = password;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {Form, Button, Col} from \"react-bootstrap\";\r\nimport {Formik} from \"formik\";\r\nimport User from \"../../services/User\";\r\nimport {register} from \"../../services/userService\";\r\nimport * as yup from 'yup';\r\nimport {toast} from \"react-toastify\";\r\n\r\n\r\nexport default class RegisterComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            requestSend: false\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        const user = new User(\r\n            event.name,\r\n            event.email,\r\n            event.password,\r\n        );\r\n\r\n        this.setState({requestSend: true});\r\n\r\n        try {\r\n            let res = await register(user);\r\n            this.props.handleUserRegistered(res);\r\n            this.setState({requestSend: false});\r\n        } catch (err) {\r\n            console.log(err);\r\n            toast.error('Registration error :(');\r\n            this.setState({requestSend: false});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const schema = yup.object().shape({\r\n            name: yup.string().min(1, 'Required').required(),\r\n            email: yup.string().email().required('Required'),\r\n            password: yup.string().min(1, 'Required').required('Required'),\r\n        });\r\n        return (\r\n            <Col className={'py-2'}>\r\n                <h3 className={'p-2'}>Register</h3>\r\n                <Formik\r\n                    validationSchema={schema}\r\n                    onSubmit={this.handleSubmit}\r\n                    initialValues={{\r\n                        name: '',\r\n                        email: '',\r\n                        password: '',\r\n                    }}\r\n                >\r\n                    {({\r\n                          handleSubmit,\r\n                          handleChange,\r\n                          handleBlur,\r\n                          values,\r\n                          touched,\r\n                          isValid,\r\n                          errors,\r\n                      }) => (\r\n                        <Form noValidate onSubmit={handleSubmit}>\r\n                            <Form.Group controlId=\"validationName\">\r\n                                <Form.Label>Name</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    value={values.name}\r\n                                    onChange={handleChange}\r\n                                    isValid={touched.name && !errors.name}\r\n                                />\r\n                                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"validationEmail\">\r\n                                <Form.Label>Email</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"email\"\r\n                                    name=\"email\"\r\n                                    value={values.email}\r\n                                    onChange={handleChange}\r\n                                    isValid={touched.email && !errors.email}\r\n                                />\r\n                                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"validationPassword\">\r\n                                <Form.Label>Password</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    value={values.password}\r\n                                    onChange={handleChange}\r\n                                    isValid={touched.password && !errors.password}\r\n                                />\r\n                                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                            </Form.Group>\r\n                            <Button disabled={this.state.requestSend} type=\"submit\">Submit form</Button>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </Col>\r\n        )\r\n    }\r\n}\r\n","import axios from \"../axios\";\r\nimport {getUserToken} from \"./userService\";\r\n\r\nexport const addTask = (task) => {\r\n    return axios.post('task',\r\n        task,\r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${getUserToken()}`\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nexport const deleteTask = (task) => {\r\n    return axios. delete(`task/${task.id}`)\r\n}\r\n\r\nexport const updateTask = (task) => {\r\n    return axios.patch(`task/${task.id}`, task)\r\n}\r\n\r\nexport const fetchTasks = () => {\r\n    return axios.get('tasks')\r\n}\r\n","import Pusher from 'pusher-js';\r\n\r\nexport default new Pusher('fdb0a54745c072fc5ff1', {\r\n    cluster: 'eu',\r\n});\r\n","import React from 'react';\r\nimport User from \"../../services/User\";\r\nimport {register} from \"../../services/userService\";\r\nimport {toast} from \"react-toastify\";\r\nimport * as yup from \"yup\";\r\nimport {Button, Col, Form} from \"react-bootstrap\";\r\nimport {Formik} from \"formik\";\r\nimport {addTask, updateTask} from \"../../services/taskService\";\r\n\r\nexport default class TaskFormComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            requestSend: false\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n\r\n        this.setState({requestSend: true});\r\n\r\n        try {\r\n            let res;\r\n            if (this.props.taskToEdit && this.props.taskToEdit.hasOwnProperty('id')) {\r\n                event.id = this.props.taskToEdit.id;\r\n                this.props.handleEditTask();\r\n                res = await updateTask(event);\r\n                this.props.handleEditTaskAsync(res.data);\r\n            } else {\r\n                res = addTask(event);\r\n                this.props.handleCreateTask();\r\n            }\r\n            this.setState({requestSend: false});\r\n        } catch (err) {\r\n            console.log(err);\r\n            toast.error('Error :(');\r\n            this.setState({requestSend: false});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const schema = yup.object().shape({\r\n            title: yup.string().min(1, 'Required').required(),\r\n            text: yup.string().min(1, 'Required').required(),\r\n            notification_date: yup.string(),\r\n            notification_time: yup.string(),\r\n        });\r\n        return (\r\n            <Col className={'py-2'}>\r\n                <h3 className={'p-2'}>{this.state.taskToEdit ? 'Обновить' : 'Создать'}</h3>\r\n                <Formik\r\n                    validationSchema={schema}\r\n                    onSubmit={this.handleSubmit}\r\n                    initialValues={{\r\n                        title: this.props.taskToEdit ? this.props.taskToEdit.title : '',\r\n                        text: this.props.taskToEdit ? this.props.taskToEdit.text : '',\r\n                        notification_date: this.props.taskToEdit ? this.props.taskToEdit.notification_date : '',\r\n                        notification_time: this.props.taskToEdit ? this.props.taskToEdit.notification_time : '',\r\n                    }}\r\n                >\r\n                    {({\r\n                          handleSubmit,\r\n                          handleChange,\r\n                          handleBlur,\r\n                          values,\r\n                          touched,\r\n                          isValid,\r\n                          errors,\r\n                      }) => (\r\n                        <Form noValidate onSubmit={handleSubmit}>\r\n                            <Form.Group controlId=\"validationTitle\">\r\n                                <Form.Label>Title</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    name=\"title\"\r\n                                    value={values.title}\r\n                                    onChange={handleChange}\r\n                                    isValid={touched.title && !errors.title}\r\n                                />\r\n                                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"validationText\">\r\n                                <Form.Label>Text</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    name=\"text\"\r\n                                    value={values.text}\r\n                                    onChange={handleChange}\r\n                                    isValid={touched.text && !errors.text}\r\n                                />\r\n                                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"validationDate\">\r\n                                <Form.Label>Date</Form.Label>\r\n                                <Form.Control\r\n                                    disabled={this.props.taskToEdit}\r\n                                    type=\"date\"\r\n                                    name=\"notification_date\"\r\n                                    value={values.notification_date}\r\n                                    onChange={handleChange}\r\n                                    isValid={touched.notification_date && !errors.notification_date}\r\n                                />\r\n                                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"validationTime\">\r\n                                <Form.Label>Time</Form.Label>\r\n                                <Form.Control\r\n                                    disabled={this.props.taskToEdit}\r\n                                    type=\"time\"\r\n                                    name=\"notification_time\"\r\n                                    value={values.notification_time}\r\n                                    onChange={handleChange}\r\n                                    isValid={touched.notification_time && !errors.notification_time}\r\n                                />\r\n                                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                            </Form.Group>\r\n                            <Button disabled={this.state.requestSend} type=\"submit\">Submit form</Button>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </Col>\r\n        )\r\n    }\r\n}\r\n","import {deleteTask, fetchTasks, updateTask} from \"../../services/taskService\";\r\nimport React from \"react\";\r\nimport pusher from '../../pusher';\r\nimport {Button, Table, Col, Modal} from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\nimport TaskFormComponent from \"./TaskFormComponent\";\r\nimport {toast} from \"react-toastify\";\r\nimport {isLogged, taskSeen} from \"../../services/userService\";\r\n\r\nexport default class TasksComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tasks: [],\r\n            showTaskModal: false,\r\n            taskToEdit: null,\r\n            disabledTaskIds: [],\r\n        }\r\n        this.closeModal = this.closeModal.bind(this);\r\n    }\r\n\r\n    initPusherSubscriptions() {\r\n        const channel = pusher.subscribe('tasks')\r\n        channel.bind('App\\\\Events\\\\TaskCompletedEvent',  (task) => {\r\n            this.replaceTaskAndNotify(task, `Task ${task.id} completed`);\r\n        }).bind('App\\\\Events\\\\TaskCreatedEvent', (task) => {\r\n            this.pushTaskAndNotify(task);\r\n        }).bind('App\\\\Events\\\\TaskDeleteEvent', (task) => {\r\n            this.removeTaskFromStateAndNotify(task);\r\n        }).bind('App\\\\Events\\\\TaskUpdateEvent', (task) => {\r\n            this.replaceTaskAndNotify(task, `Task ${task.id} updated`);\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.initPusherSubscriptions();\r\n        fetchTasks().then(res => {\r\n            this.setState({\r\n                tasks: res.data\r\n            })\r\n        })\r\n    }\r\n\r\n    notificationTime(task) {\r\n        return moment(task.notification_date + ' ' + task.notification_time).format('lll')\r\n    }\r\n\r\n    closeModal() {\r\n        this.setState({showTaskModal: false})\r\n    }\r\n\r\n\r\n    pushTaskAndNotify(task) {\r\n        let tasks = [...this.state.tasks];\r\n        if (!tasks.find(t => t.id === task.id)) {\r\n            this.setState({tasks: [...tasks, task]});\r\n            toast.success(`${this.notificationTime(task)} - ${task.title} - ${task.user.name}`);\r\n        }\r\n    }\r\n\r\n    replaceTaskAndNotify(task, message) {\r\n        let tasks = [...this.state.tasks]\r\n        let ind = tasks.findIndex(t => t.id === task.id);\r\n        if (ind !== -1) {\r\n            if (isLogged()) {\r\n                taskSeen(task);\r\n            }\r\n            tasks.splice(ind, 1, task);\r\n            this.setState({tasks: tasks});\r\n            toast.success(message);\r\n        }\r\n    }\r\n\r\n    removeTaskFromStateAndNotify(task) {\r\n        let tasks = [...this.state.tasks]\r\n        let ind = tasks.findIndex(t => t.id === task.id);\r\n        if (ind !== -1) {\r\n            tasks.splice(ind, 1)\r\n            this.setState({tasks: tasks})\r\n            toast.success('Deleted');\r\n        }\r\n    }\r\n\r\n    async deleteTask(task) {\r\n        try {\r\n            let res = await deleteTask(task);\r\n        } catch (err) {\r\n            console.log(err);\r\n            toast.error('Delete error');\r\n        }\r\n    }\r\n\r\n    removeFromDisabledIds(taskId) {\r\n        let ids = [...this.state.disabledTaskIds];\r\n        let i = ids.findIndex(id => taskId === id);\r\n        if (i !== -1) {\r\n            ids.splice(i, 1);\r\n            this.setState({disabledTaskIds: ids});\r\n        }\r\n    }\r\n    handleEditTask() {\r\n        this.closeModal();\r\n    }\r\n\r\n    handleEditTaskAsync(task) {\r\n        this.removeFromDisabledIds(task.id);\r\n    }\r\n\r\n    handleCreateTask() {\r\n        this.closeModal();\r\n    }\r\n\r\n    notLoggedToast() {\r\n        toast.dark('For edit or create please login')\r\n    }\r\n\r\n    render() {\r\n        const tasks = this.state.tasks\r\n        const list = tasks.map(task =>\r\n            <tr key={task.id}>\r\n                <td>{task.id}</td>\r\n                <td>{task.title}</td>\r\n                <td>{task.text}</td>\r\n                <td>{this.notificationTime(task)}</td>\r\n                <td>{task.user.name}</td>\r\n                <td>{task.completed == 1 ? 'Yes' : 'No'}</td>\r\n                <td>\r\n                    <Button disabled={task.completed == 1 || this.state.disabledTaskIds.find(r => r === task.id)} variant=\"info\" className={'mr-1'} onClick={() => {\r\n                        this.setState({taskToEdit: task});\r\n                        this.setState({disabledTaskIds: [...this.state.disabledTaskIds, task.id]});\r\n                        this.setState({showTaskModal: true});\r\n                    }}>Edit</Button>\r\n                    <Button disabled={task.completed == 1 || this.state.disabledTaskIds.find(r => r === task.id)} variant=\"danger\" onClick={() => {\r\n                        this.setState({disabledTaskIds: [...this.state.disabledTaskIds, task.id]});\r\n                        this.deleteTask(task);\r\n                    }}>Delete</Button>\r\n                </td>\r\n            </tr>\r\n        )\r\n        return (\r\n            <Col>\r\n                <Button variant=\"primary\" className={'mb-2'} onClick={() => {\r\n                    if (!isLogged()) {\r\n                        this.notLoggedToast();\r\n                        return;\r\n                    }\r\n                    this.setState({showTaskModal: true})\r\n                }}>Create</Button>\r\n                <Table striped bordered hover size=\"sm\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Id</th>\r\n                        <th>Title</th>\r\n                        <th>Text</th>\r\n                        <th>Notification time</th>\r\n                        <th>User name</th>\r\n                        <th>Completed</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {list}\r\n                    </tbody>\r\n                </Table>\r\n                <Modal show={this.state.showTaskModal} onHide={() => {\r\n                    this.removeFromDisabledIds(\r\n                        this.state.disabledTaskIds[this.state.disabledTaskIds.length - 1]\r\n                    );\r\n                    this.closeModal();\r\n                }}>\r\n                    <TaskFormComponent\r\n                        taskToEdit={this.state.taskToEdit}\r\n                        handleCreateTask={() => this.handleCreateTask()}\r\n                        handleEditTaskAsync={(task) => this.handleEditTaskAsync(task)}\r\n                        handleEditTask={() => this.handleEditTask()}\r\n                    />\r\n                </Modal>\r\n            </Col>\r\n\r\n        )\r\n    }\r\n}\r\n","import User from \"../../services/User\";\r\nimport {login, register} from \"../../services/userService\";\r\nimport {toast} from \"react-toastify\";\r\nimport * as yup from \"yup\";\r\nimport {Button, Col, Form} from \"react-bootstrap\";\r\nimport {Formik} from \"formik\";\r\nimport React from \"react\";\r\n\r\nexport default class LoginComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            requestSend: false\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        this.setState({requestSend: true});\r\n\r\n        try {\r\n            let res = await login(event.email, event.password);\r\n            this.props.handleUserLogged(res);\r\n            this.setState({requestSend: false});\r\n        } catch (err) {\r\n            toast.error('Login error :(');\r\n            this.setState({requestSend: false});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const schema = yup.object().shape({\r\n            email: yup.string().email().required('Required'),\r\n            password: yup.string().min(1, 'Required').required('Required'),\r\n        });\r\n        return (\r\n            <Col className={'py-2'}>\r\n                <h3 className={'p-2'}>Login</h3>\r\n                <Formik\r\n                    validationSchema={schema}\r\n                    onSubmit={this.handleSubmit}\r\n                    initialValues={{\r\n                        email: '',\r\n                        password: '',\r\n                    }}\r\n                >\r\n                    {({\r\n                          handleSubmit,\r\n                          handleChange,\r\n                          handleBlur,\r\n                          values,\r\n                          touched,\r\n                          isValid,\r\n                          errors,\r\n                      }) => (\r\n                        <Form noValidate onSubmit={handleSubmit}>\r\n                            <Form.Group controlId=\"validationEmail\">\r\n                                <Form.Label>Email</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"email\"\r\n                                    name=\"email\"\r\n                                    value={values.email}\r\n                                    onChange={handleChange}\r\n                                    isValid={touched.email && !errors.email}\r\n                                />\r\n                                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"validationPassword\">\r\n                                <Form.Label>Password</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    value={values.password}\r\n                                    onChange={handleChange}\r\n                                    isValid={touched.password && !errors.password}\r\n                                />\r\n                                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                            </Form.Group>\r\n                            <Button disabled={this.state.requestSend} type=\"submit\">Submit form</Button>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </Col>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {Container, Modal, Nav, Row} from \"react-bootstrap\";\r\nimport {getUserData, isLogged, saveUserData} from '../../services/userService'\r\nimport RegisterComponent from \"../register/RegisterComponent\";\r\nimport TasksComponent from \"../tasks/TasksComponent\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport LoginComponent from \"../login/LoginComponent\";\r\n\r\n\r\nfunction LoginNav(props) {\r\n    return (\r\n        <Nav\r\n            className=\"justify-content-center mb-3\"\r\n            onSelect={(selectedKey) => props.onClick(selectedKey)}\r\n        >\r\n            <Nav.Item>\r\n                <Nav.Link eventKey=\"register\">Register</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n                <Nav.Link eventKey=\"login\">Link</Nav.Link>\r\n            </Nav.Item>\r\n        </Nav>\r\n    )\r\n}\r\n\r\nfunction GreetingsNav(props) {\r\n    return (\r\n        <Nav\r\n            className=\"justify-content-center mb-3\"\r\n        >\r\n            <Nav.Item>\r\n                <Nav.Link disabled>Hi {props.name}</Nav.Link>\r\n            </Nav.Item>\r\n        </Nav>\r\n    )\r\n}\r\n\r\nexport default class LayoutComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.openModal = this.openModal.bind(this);\r\n        this.closeLoginModal = this.closeLoginModal.bind(this);\r\n        this.closeRegisterModal = this.closeRegisterModal.bind(this);\r\n        this.state = {\r\n            showRegisterModal: false,\r\n            showLoginModal: false,\r\n            isLogged: false,\r\n            userData: null,\r\n            userName: ''\r\n        };\r\n    }\r\n\r\n    openModal(type) {\r\n        if (type === 'register') {\r\n            this.setState({showRegisterModal: true, showLoginModal: false})\r\n        }\r\n        if (type === 'login') {\r\n            this.setState({showRegisterModal: false, showLoginModal: true})\r\n        }\r\n    }\r\n\r\n    handleUserRegistered(res) {\r\n        saveUserData(res);\r\n        this.closeRegisterModal();\r\n        this.setState({isLogged: isLogged()});\r\n        toast.success('Thank you for registration');\r\n        this.setState({userName: getUserData().name});\r\n\r\n    }\r\n\r\n    handleUserLogged(res) {\r\n        saveUserData(res);\r\n        this.closeLoginModal();\r\n        this.setState({isLogged: isLogged()});\r\n        toast.success('You logged in');\r\n        this.setState({userName: getUserData().name});\r\n    }\r\n\r\n    closeRegisterModal() {\r\n        this.setState({showRegisterModal: false});\r\n    }\r\n\r\n    closeLoginModal() {\r\n        this.setState({showLoginModal: false});\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isLogged()) {\r\n            this.setState({userName: getUserData().name})\r\n            this.setState({isLogged: isLogged()});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const isLogged = this.state.isLogged;\r\n        const name = this.state.userName;\r\n        let nav;\r\n        if (isLogged) {\r\n            nav = <GreetingsNav name={name} />;\r\n        } else {\r\n            nav = <LoginNav onClick={this.openModal} />;\r\n        }\r\n        return (\r\n            <Container fluid className={'px-5'}>\r\n                {nav}\r\n                <Row>\r\n                    <TasksComponent />\r\n                </Row>\r\n                <Modal show={this.state.showRegisterModal} onHide={this.closeRegisterModal}>\r\n                    <RegisterComponent handleUserRegistered={(res) => {\r\n                        this.handleUserRegistered(res)\r\n                    }} />\r\n                </Modal>\r\n                <Modal show={this.state.showLoginModal} onHide={this.closeLoginModal}>\r\n                    <LoginComponent handleUserLogged={(res) => {\r\n                        this.handleUserLogged(res)\r\n                    }} />\r\n                </Modal>\r\n                <ToastContainer />\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n","import './App.css';\nimport LayoutComponent from \"./components/layout/LayoutComponent\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n  return (\n    <LayoutComponent />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}